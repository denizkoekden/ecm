name: Build and Release ECM/UNECM

on:
  push:
    branches:
      - release

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup GCC on Windows
        if: runner.os == 'Windows'
        run: |
          gcc --version
        shell: bash

      - name: Compile on Linux
        if: runner.os == 'Linux'
        run: |
          gcc -o ecm-linux ecm.c
          gcc -o unecm-linux unecm.c
        shell: bash

      - name: Compile on macOS (Universal Binary)
        if: runner.os == 'macOS'
        run: |
          gcc -arch x86_64 -arch arm64 -o ecm-macos ecm.c
          gcc -arch x86_64 -arch arm64 -o unecm-macos unecm.c
        shell: bash

      - name: Compile on Windows
        if: runner.os == 'Windows'
        run: |
          gcc -o ecm-windows.exe ecm.c
          gcc -o unecm-windows.exe unecm.c
        shell: bash

      - name: Prepare Artifacts
        run: |
          mkdir -p bin
          mv ecm-* unecm-* bin/ 2>/dev/null || true
        shell: bash

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Bump Version
        id: bump_version
        run: |
          latest_version=${{ env.LATEST_TAG }}
          if [[ "$latest_version" == "v0.0.0" ]]; then
            new_version="v1.0.0"
          else
            new_version=$(echo $latest_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          fi
          echo "New version: $new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.NEW_VERSION }} --title "Release ${{ env.NEW_VERSION }}" --notes "Automatically generated release."

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in bin/*; do
            gh release upload ${{ env.NEW_VERSION }} "$file" --clobber
          done
